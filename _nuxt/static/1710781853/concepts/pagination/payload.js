__NUXT_JSONP__("/concepts/pagination", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{document:{slug:l,description:"An opinionated framework for building APIs in Ruby.",title:"Pagination",position:1.5,category:"Concepts",toc:[{id:p,depth:2,text:q}],body:{type:"root",children:[{type:b,tag:j,props:{},children:[{type:a,value:"Paginated collections need some consideration here because we need to be able to reliably paginate results."}]},{type:a,value:e},{type:b,tag:"h2",props:{id:p},children:[{type:b,tag:"a",props:{ariaHidden:m,href:"#endpoints",tabIndex:-1},children:[{type:b,tag:c,props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:q}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"An endpoint can only return a single field which is paginated. You should define the field as normal as an array but also\nadd a "},{type:b,tag:f,props:{},children:[{type:a,value:r}]},{type:a,value:" reference to say that the results here should be paginated."}]},{type:a,value:e},{type:b,tag:s,props:{className:[t]},children:[{type:b,tag:u,props:{className:[v,w]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"field "},{type:b,tag:c,props:{className:[d,"symbol"]},children:[{type:a,value:":widgets"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"["}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"]"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:" paginate"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:z}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:m}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"Adding "},{type:b,tag:f,props:{},children:[{type:a,value:r}]},{type:a,value:" does a few things by default:"}]},{type:a,value:e},{type:b,tag:"ul",props:{},children:[{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:B},{type:b,tag:f,props:{},children:[{type:a,value:"page"}]},{type:a,value:" which can be provided. The default will be 1."}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:B},{type:b,tag:f,props:{},children:[{type:a,value:"per_page"}]},{type:a,value:" which can be provided. The default will be 30."}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"It adds a field called "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" which will return a "},{type:b,tag:f,props:{},children:[{type:a,value:"PaginationObject"}]},{type:a,value:" object containing details of the current page as well as the total number of records and the number of pages (where possible)."}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"You will then be responsible for adding fields for the field and the "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" field. But wait... there's a helper for this that will work with Kaminari."}]},{type:a,value:e},{type:b,tag:s,props:{className:[t]},children:[{type:b,tag:u,props:{className:[v,w]},children:[{type:b,tag:f,props:{},children:[{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"def"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,"method-definition"]},children:[{type:b,tag:c,props:{className:[d,"function"]},children:[{type:a,value:"call"}]}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# This will handle everything needed to add the appropriate fields assuming that the scope"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# responds to `to_a`, `total_pages`, `current_page`, as well as `page()` and `per()`. This"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# is the same as Kaminari provides out of the box so this will work witht hat."}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"#"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# Also, if you provide the `large_set` option, pagination will happen but only if the total"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# is less than 1,000 items. If this happens, the pagination output will say this has happened."}]},{type:a,value:"\n  paginate "},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"."}]},{type:a,value:"all"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:" large_set"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:z}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:m}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"end"}]},{type:a,value:e}]}]}]}]},dir:"\u002Fen\u002Fconcepts",path:"\u002Fen\u002Fconcepts\u002Fpagination",extension:".md",createdAt:D,updatedAt:D,to:"\u002Fconcepts\u002Fpagination"},prev:{title:"Field Specs",path:"\u002Fen\u002Fconcepts\u002Ffield_specs",to:"\u002Fconcepts\u002Ffield_specs"},next:{title:"Scopes",path:"\u002Fen\u002Fconcepts\u002Fscopes",to:"\u002Fconcepts\u002Fscopes"}}],fetch:{},mutations:[]}}("text","element","span","token","\n","code","punctuation","\n  ","comment","p"," ","pagination","true",",","li","endpoints","Endpoints","paginate","div","nuxt-content-highlight","pre","language-ruby","line-numbers","constant","Widget",":","boolean","It adds an argument called ","keyword","2024-03-18T17:10:17.939Z")));